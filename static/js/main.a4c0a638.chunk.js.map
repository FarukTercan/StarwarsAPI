{"version":3,"sources":["components/Navbar.js","components/MovieCard.js","components/ErrorMessage.js","cachedFetch.js","components/MovieList.js","components/CharacterCard.js","components/CharacterList.js","components/SelectedMovie.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Menu","inverted","Container","Image","src","size","Item","name","as","MovieCard","movies","map","movie","to","episode_id","key","url","title","ErrorMessage","Message","negative","Header","cache","a","fetch","res","json","cachedFetch","MovieList","useState","films","setFilms","loading","setLoading","error","setError","useEffect","Promise","all","allResponses","console","log","fetchMovies","Dimmer","active","Loader","CharacterCard","character","Grid","Column","Card","color","style","height","Content","Description","birth_year","gender","CharacterList","characters","search","setSearch","filteredCharacters","setFilteredCharacters","filteredData","filter","toLowerCase","includes","type","id","placeholder","onChange","e","target","value","width","border","padding","fontSize","marginBottom","columns","centered","SelectedMovie","ID","useParams","movieProfile","find","parseInt","opening_crawl","director","release_date","className","extra","Button","Icon","App","setCharacters","setMovies","allCharacters","results","next","fetchCharacters","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a4c0a638.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Menu, Container, Image } from 'semantic-ui-react';\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <Menu inverted>\r\n        <Container>\r\n          <Image\r\n            src='https://i.pinimg.com/originals/a1/f5/18/a1f518957c80740830dec55930b16c0e.gif'\r\n            size='small'\r\n          />\r\n          <Menu.Item name='Star Wars API' as='h1' />\r\n        </Container>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction MovieCard({ movies }) {\r\n  return (\r\n    <div>\r\n      {movies.map((movie) => {\r\n        return (\r\n          <Link to={`/${movie.episode_id} `} key={movie.url}>\r\n            <ul>\r\n              <li>{movie.title}</li>\r\n            </ul>\r\n          </Link>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieCard;\r\n","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\nconst ErrorMessage = () => (\r\n  <Message negative>\r\n    <Message.Header>Problem Occured While Fetching Data</Message.Header>\r\n    <p>Please try again</p>\r\n  </Message>\r\n);\r\n\r\nexport default ErrorMessage;\r\n","const cache = {};\r\nasync function cachedFetch(url) {\r\n  if (cache[url]) {\r\n    return cache[url];\r\n  }\r\n  const res = await fetch(url);\r\n  cache[url] = await res.json();\r\n  return cache[url];\r\n}\r\nexport default cachedFetch;\r\n","import React, { useState, useEffect } from 'react';\r\nimport MovieCard from './MovieCard';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport cachedFetch from './../cachedFetch';\r\n\r\nfunction MovieList({ movies }) {\r\n  const [films, setFilms] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchMovies() {\r\n      try {\r\n        const allResponses = await Promise.all(\r\n          movies.map((url) => cachedFetch(url))\r\n        );\r\n        setFilms(allResponses);\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setError(true);\r\n      }\r\n    }\r\n    fetchMovies();\r\n  }, [movies]);\r\n\r\n  return (\r\n    <div>\r\n      {error ? (\r\n        <ErrorMessage />\r\n      ) : loading ? (\r\n        <Dimmer active inverted>\r\n          <Loader inverted>Loading</Loader>\r\n        </Dimmer>\r\n      ) : (\r\n        <MovieCard movies={films} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieList;\r\n","import React from 'react';\r\nimport { Card, Grid } from 'semantic-ui-react';\r\nimport MovieList from './MovieList';\r\n\r\nfunction CharacterCard({ character, movies }) {\r\n  return (\r\n    <Grid>\r\n      <Grid.Column>\r\n        <Card color='red' style={{ height: '25rem' }}>\r\n          <Card.Content>\r\n            <Card.Header>{character.name}</Card.Header>\r\n\r\n            <Card.Description>\r\n              <strong>Born in {character.birth_year}</strong>\r\n              <br />\r\n              <strong>Height {character.height}</strong>\r\n              <br />\r\n              <strong>{character.gender}</strong>\r\n            </Card.Description>\r\n          </Card.Content>\r\n          <Card.Content>\r\n            <MovieList movies={character.films} />\r\n          </Card.Content>\r\n        </Card>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React, { Fragment } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport CharacterCard from './CharacterCard';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction CharacterList({ characters }) {\r\n  const [search, setSearch] = useState('');\r\n  const [filteredCharacters, setFilteredCharacters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const filteredData = characters.filter((character) => {\r\n      return character.name.toLowerCase().includes(search.toLowerCase());\r\n    });\r\n\r\n    setFilteredCharacters(filteredData);\r\n  }, [search, characters]);\r\n\r\n  const handleChangeSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const searchStyle = {\r\n    width: '100%',\r\n    height: '32px',\r\n    border: '1px solid #eaeaea',\r\n    padding: '5px 10px',\r\n    fontSize: '16px',\r\n    marginBottom: '10px'\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type='text'\r\n        name='searchBar'\r\n        id='searchBar'\r\n        placeholder='Search for movie actors'\r\n        onChange={handleChangeSearch}\r\n        style={searchStyle}\r\n      />\r\n\r\n      <Grid columns={3} centered>\r\n        {filteredCharacters.map((character) => {\r\n          return (\r\n            <Fragment key={character.name}>\r\n              <CharacterCard character={character} />\r\n            </Fragment>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterList;\r\n","import React from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Card, Container, Button, Icon } from 'semantic-ui-react';\r\n\r\nfunction SelectedMovie({ movies }) {\r\n  const { ID } = useParams();\r\n\r\n  const movieProfile = movies.find(\r\n    (movie) => movie.episode_id === parseInt(ID)\r\n  );\r\n  const {\r\n    title,\r\n    episode_id,\r\n    opening_crawl,\r\n    director,\r\n    release_date\r\n  } = movieProfile;\r\n\r\n  return (\r\n    <div className='selected-div'>\r\n      <Container>\r\n        <Card color='red'>\r\n          <Card.Content>\r\n            <br />\r\n\r\n            <Card.Header>{title}</Card.Header>\r\n\r\n            <Card.Description>\r\n              <strong>Episode:</strong> {episode_id}\r\n              <br />\r\n              <br />\r\n              <strong>Director:</strong> {director}\r\n              <br />\r\n              <br />\r\n              {opening_crawl}\r\n            </Card.Description>\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <strong>Release Date {release_date}</strong>\r\n          </Card.Content>\r\n        </Card>\r\n\r\n        <div className='btn'>\r\n          <Link to='/'>\r\n            <Button color='black'>\r\n              <Icon name='left arrow' />\r\n              Back to actor search\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectedMovie;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Navbar from './components/Navbar';\r\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\r\nimport CharacterList from './components/CharacterList';\r\nimport ErrorMessage from './components/ErrorMessage';\r\nimport SelectedMovie from './components/SelectedMovie';\r\nimport cachedFetch from './cachedFetch';\r\n\r\nfunction App() {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [movies, setMovies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchCharacters() {\r\n      try {\r\n        // Characters data\r\n        let allCharacters = [];\r\n        let characters = await cachedFetch(\r\n          'https://swapi.dev/api/people/?format=json'\r\n        );\r\n\r\n        allCharacters = [...characters.results];\r\n\r\n        // fetch all pages\r\n        while (characters.next !== null) {\r\n          characters = await cachedFetch(characters.next);\r\n          allCharacters = [...allCharacters, ...characters.results];\r\n        }\r\n\r\n        setCharacters(allCharacters);\r\n\r\n        // Films data\r\n        let movies = await cachedFetch(\r\n          'https://swapi.dev/api/films/?format=json'\r\n        );\r\n        setMovies(movies.results);\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n    }\r\n    fetchCharacters();\r\n  }, []);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Router>\r\n        <Switch>\r\n          <Container>\r\n            <Navbar />\r\n            <Route exact path='/'>\r\n              {error ? (\r\n                <ErrorMessage />\r\n              ) : loading ? (\r\n                <Dimmer active inverted>\r\n                  <Loader inverted>Loading</Loader>\r\n                </Dimmer>\r\n              ) : (\r\n                <CharacterList characters={characters} />\r\n              )}\r\n            </Route>\r\n            <Route exact path='/:ID'>\r\n              {movies && <SelectedMovie movies={movies} />}\r\n            </Route>\r\n          </Container>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}